// Code generated by mockery v2.50.0. DO NOT EDIT.

package certdeckmocks

import (
	crypto "crypto"
	x509 "crypto/x509"

	mock "github.com/stretchr/testify/mock"
)

// MockCollectionRow is an autogenerated mock type for the CollectionRow type
type MockCollectionRow struct {
	mock.Mock
}

type MockCollectionRow_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectionRow) EXPECT() *MockCollectionRow_Expecter {
	return &MockCollectionRow_Expecter{mock: &_m.Mock}
}

// Certificates provides a mock function with no fields
func (_m *MockCollectionRow) Certificates() []*x509.Certificate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Certificates")
	}

	var r0 []*x509.Certificate
	if rf, ok := ret.Get(0).(func() []*x509.Certificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*x509.Certificate)
		}
	}

	return r0
}

// MockCollectionRow_Certificates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Certificates'
type MockCollectionRow_Certificates_Call struct {
	*mock.Call
}

// Certificates is a helper method to define mock.On call
func (_e *MockCollectionRow_Expecter) Certificates() *MockCollectionRow_Certificates_Call {
	return &MockCollectionRow_Certificates_Call{Call: _e.mock.On("Certificates")}
}

func (_c *MockCollectionRow_Certificates_Call) Run(run func()) *MockCollectionRow_Certificates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionRow_Certificates_Call) Return(_a0 []*x509.Certificate) *MockCollectionRow_Certificates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionRow_Certificates_Call) RunAndReturn(run func() []*x509.Certificate) *MockCollectionRow_Certificates_Call {
	_c.Call.Return(run)
	return _c
}

// CertificatesBase64 provides a mock function with no fields
func (_m *MockCollectionRow) CertificatesBase64() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificatesBase64")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockCollectionRow_CertificatesBase64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificatesBase64'
type MockCollectionRow_CertificatesBase64_Call struct {
	*mock.Call
}

// CertificatesBase64 is a helper method to define mock.On call
func (_e *MockCollectionRow_Expecter) CertificatesBase64() *MockCollectionRow_CertificatesBase64_Call {
	return &MockCollectionRow_CertificatesBase64_Call{Call: _e.mock.On("CertificatesBase64")}
}

func (_c *MockCollectionRow_CertificatesBase64_Call) Run(run func()) *MockCollectionRow_CertificatesBase64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionRow_CertificatesBase64_Call) Return(_a0 []string) *MockCollectionRow_CertificatesBase64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionRow_CertificatesBase64_Call) RunAndReturn(run func() []string) *MockCollectionRow_CertificatesBase64_Call {
	_c.Call.Return(run)
	return _c
}

// CertificatesDER provides a mock function with no fields
func (_m *MockCollectionRow) CertificatesDER() [][]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificatesDER")
	}

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// MockCollectionRow_CertificatesDER_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificatesDER'
type MockCollectionRow_CertificatesDER_Call struct {
	*mock.Call
}

// CertificatesDER is a helper method to define mock.On call
func (_e *MockCollectionRow_Expecter) CertificatesDER() *MockCollectionRow_CertificatesDER_Call {
	return &MockCollectionRow_CertificatesDER_Call{Call: _e.mock.On("CertificatesDER")}
}

func (_c *MockCollectionRow_CertificatesDER_Call) Run(run func()) *MockCollectionRow_CertificatesDER_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionRow_CertificatesDER_Call) Return(_a0 [][]byte) *MockCollectionRow_CertificatesDER_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionRow_CertificatesDER_Call) RunAndReturn(run func() [][]byte) *MockCollectionRow_CertificatesDER_Call {
	_c.Call.Return(run)
	return _c
}

// CertificatesDERInline provides a mock function with no fields
func (_m *MockCollectionRow) CertificatesDERInline() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificatesDERInline")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockCollectionRow_CertificatesDERInline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificatesDERInline'
type MockCollectionRow_CertificatesDERInline_Call struct {
	*mock.Call
}

// CertificatesDERInline is a helper method to define mock.On call
func (_e *MockCollectionRow_Expecter) CertificatesDERInline() *MockCollectionRow_CertificatesDERInline_Call {
	return &MockCollectionRow_CertificatesDERInline_Call{Call: _e.mock.On("CertificatesDERInline")}
}

func (_c *MockCollectionRow_CertificatesDERInline_Call) Run(run func()) *MockCollectionRow_CertificatesDERInline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionRow_CertificatesDERInline_Call) Return(_a0 []byte) *MockCollectionRow_CertificatesDERInline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionRow_CertificatesDERInline_Call) RunAndReturn(run func() []byte) *MockCollectionRow_CertificatesDERInline_Call {
	_c.Call.Return(run)
	return _c
}

// CertificatesPEM provides a mock function with no fields
func (_m *MockCollectionRow) CertificatesPEM() [][]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificatesPEM")
	}

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// MockCollectionRow_CertificatesPEM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificatesPEM'
type MockCollectionRow_CertificatesPEM_Call struct {
	*mock.Call
}

// CertificatesPEM is a helper method to define mock.On call
func (_e *MockCollectionRow_Expecter) CertificatesPEM() *MockCollectionRow_CertificatesPEM_Call {
	return &MockCollectionRow_CertificatesPEM_Call{Call: _e.mock.On("CertificatesPEM")}
}

func (_c *MockCollectionRow_CertificatesPEM_Call) Run(run func()) *MockCollectionRow_CertificatesPEM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionRow_CertificatesPEM_Call) Return(_a0 [][]byte) *MockCollectionRow_CertificatesPEM_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionRow_CertificatesPEM_Call) RunAndReturn(run func() [][]byte) *MockCollectionRow_CertificatesPEM_Call {
	_c.Call.Return(run)
	return _c
}

// CertificatesPEMInline provides a mock function with no fields
func (_m *MockCollectionRow) CertificatesPEMInline() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificatesPEMInline")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockCollectionRow_CertificatesPEMInline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificatesPEMInline'
type MockCollectionRow_CertificatesPEMInline_Call struct {
	*mock.Call
}

// CertificatesPEMInline is a helper method to define mock.On call
func (_e *MockCollectionRow_Expecter) CertificatesPEMInline() *MockCollectionRow_CertificatesPEMInline_Call {
	return &MockCollectionRow_CertificatesPEMInline_Call{Call: _e.mock.On("CertificatesPEMInline")}
}

func (_c *MockCollectionRow_CertificatesPEMInline_Call) Run(run func()) *MockCollectionRow_CertificatesPEMInline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionRow_CertificatesPEMInline_Call) Return(_a0 []byte) *MockCollectionRow_CertificatesPEMInline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionRow_CertificatesPEMInline_Call) RunAndReturn(run func() []byte) *MockCollectionRow_CertificatesPEMInline_Call {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function with no fields
func (_m *MockCollectionRow) Key() crypto.Signer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 crypto.Signer
	if rf, ok := ret.Get(0).(func() crypto.Signer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signer)
		}
	}

	return r0
}

// MockCollectionRow_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type MockCollectionRow_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *MockCollectionRow_Expecter) Key() *MockCollectionRow_Key_Call {
	return &MockCollectionRow_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *MockCollectionRow_Key_Call) Run(run func()) *MockCollectionRow_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionRow_Key_Call) Return(_a0 crypto.Signer) *MockCollectionRow_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionRow_Key_Call) RunAndReturn(run func() crypto.Signer) *MockCollectionRow_Key_Call {
	_c.Call.Return(run)
	return _c
}

// KeyDER provides a mock function with no fields
func (_m *MockCollectionRow) KeyDER() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyDER")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockCollectionRow_KeyDER_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyDER'
type MockCollectionRow_KeyDER_Call struct {
	*mock.Call
}

// KeyDER is a helper method to define mock.On call
func (_e *MockCollectionRow_Expecter) KeyDER() *MockCollectionRow_KeyDER_Call {
	return &MockCollectionRow_KeyDER_Call{Call: _e.mock.On("KeyDER")}
}

func (_c *MockCollectionRow_KeyDER_Call) Run(run func()) *MockCollectionRow_KeyDER_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionRow_KeyDER_Call) Return(_a0 []byte) *MockCollectionRow_KeyDER_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionRow_KeyDER_Call) RunAndReturn(run func() []byte) *MockCollectionRow_KeyDER_Call {
	_c.Call.Return(run)
	return _c
}

// KeyPEM provides a mock function with no fields
func (_m *MockCollectionRow) KeyPEM() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyPEM")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockCollectionRow_KeyPEM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyPEM'
type MockCollectionRow_KeyPEM_Call struct {
	*mock.Call
}

// KeyPEM is a helper method to define mock.On call
func (_e *MockCollectionRow_Expecter) KeyPEM() *MockCollectionRow_KeyPEM_Call {
	return &MockCollectionRow_KeyPEM_Call{Call: _e.mock.On("KeyPEM")}
}

func (_c *MockCollectionRow_KeyPEM_Call) Run(run func()) *MockCollectionRow_KeyPEM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionRow_KeyPEM_Call) Return(_a0 []byte) *MockCollectionRow_KeyPEM_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionRow_KeyPEM_Call) RunAndReturn(run func() []byte) *MockCollectionRow_KeyPEM_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollectionRow creates a new instance of MockCollectionRow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollectionRow(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollectionRow {
	mock := &MockCollectionRow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
