// Code generated by mockery v2.50.0. DO NOT EDIT.

package certdeckmocks

import (
	big "math/big"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSerialStore is an autogenerated mock type for the SerialStore type
type MockSerialStore struct {
	mock.Mock
}

type MockSerialStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSerialStore) EXPECT() *MockSerialStore_Expecter {
	return &MockSerialStore_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: ctx, serial
func (_m *MockSerialStore) Insert(ctx context.Context, serial *big.Int) error {
	ret := _m.Called(ctx, serial)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) error); ok {
		r0 = rf(ctx, serial)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSerialStore_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockSerialStore_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - serial *big.Int
func (_e *MockSerialStore_Expecter) Insert(ctx interface{}, serial interface{}) *MockSerialStore_Insert_Call {
	return &MockSerialStore_Insert_Call{Call: _e.mock.On("Insert", ctx, serial)}
}

func (_c *MockSerialStore_Insert_Call) Run(run func(ctx context.Context, serial *big.Int)) *MockSerialStore_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *MockSerialStore_Insert_Call) Return(_a0 error) *MockSerialStore_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSerialStore_Insert_Call) RunAndReturn(run func(context.Context, *big.Int) error) *MockSerialStore_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSerialStore creates a new instance of MockSerialStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSerialStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSerialStore {
	mock := &MockSerialStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
